import pygame
import random
from os import listdir
from os.path import isfile, join
import os
import json
import time
from datetime import datetime

# Initialize pygame
pygame.mixer.init()
pygame.init()

# Game window dimensions
SCREEN_WIDTH = 1280
SCREEN_HEIGHT = 720

# Create game window
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption('Jump to up to Mount Apo')

# Set frame rate
clock = pygame.time.Clock()
FPS = 60

# Game variables
SCROLL_THRESH = 200
GRAVITY = 0.7
MAX_PLATFORMS = 15
MAX_SCORE = 3000  # Maximum score cap
scroll = 0
bg_scroll = 0
game_over = False
fade_counter = 0
show_leaderboard = False
name_input_active = False
input_box = None
show_scoreboard = False

# Define colours
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
GOLD = (255, 215, 0)
SILVER = (192, 192, 192)
BRONZE = (205, 127, 50)

#Load sound effects and music
try:
    # Load sound effects and music
    jump_sound = pygame.mixer.Sound('Assets/Sound/jump.mp3')
    death_sound = pygame.mixer.Sound('Assets/Sound/death.mp3')
    # Load and start background music
    pygame.mixer.music.load('Assets/Sound/bgm.mp3')
    pygame.mixer.music.set_volume(0.3)  # Set music to 30% volume
    pygame.mixer.music.play(-1)  # -1 means loop indefinitely
except Exception as e:
    print(f"Error loading audio: {e}")

# Define font
try:
    font_path = os.path.join('Assets', 'Fonts', 'Minecraft.ttf')
    font_small = pygame.font.Font(font_path, 20)
    font_big = pygame.font.Font(font_path, 24)
    font_title = pygame.font.Font(font_path, 32)
    font_score = pygame.font.Font(font_path, 28)
except Exception as e:
    print(f"Couldn't load custom font, falling back to system font: {e}")
    font_small = pygame.font.SysFont('Arial', 20)
    font_big = pygame.font.SysFont('Arial', 24)
    font_title = pygame.font.SysFont('Arial', 32)
    font_score = pygame.font.SysFont('Arial', 28)

def draw_text(text, font, text_col, x, y):
    img = font.render(text, True, text_col)
    screen.blit(img, (x, y))

# Load images
try:
    platform_image = pygame.image.load('Assets/Platform/Grey Off.png').convert_alpha()
    bg_image = pygame.image.load('Assets/Background/grey.png').convert_alpha()
    border_image = pygame.image.load('Assets/Background/rockwall.png').convert_alpha()
    
    # Scale the background image with more height for smoother scrolling
    scaled_height = int(SCREEN_HEIGHT * 1.5)  # Increased from 1.2 to 1.5
    bg_image = pygame.transform.scale(bg_image, (SCREEN_WIDTH, scaled_height))
    
    # Create a more subtle initial overlay
    temp_surface = pygame.Surface((SCREEN_WIDTH, scaled_height), pygame.SRCALPHA)
    temp_surface.blit(bg_image, (0, 0))
    temp_surface.set_alpha(210)  # Changed from 230 to 210 for slightly more visibility
    bg_image = temp_surface
except Exception as e:
    print(f"Error loading images: {e}")
    raise
def draw_borders(scroll):
    border_height = 64  # Height of your border image
    tiles_needed = (SCREEN_HEIGHT // border_height) + 2
    
    # Calculate the starting y position for the first tile
    start_y = scroll % border_height
    
    # Draw left border
    for i in range(tiles_needed):
        y_pos = -border_height + (i * border_height) + start_y
        screen.blit(border_image, (0, y_pos))
    
    # Draw right border
    for i in range(tiles_needed):
        y_pos = -border_height + (i * border_height) + start_y
        screen.blit(border_image, (SCREEN_WIDTH - border_height, y_pos))


class ScoreboardScreen:
    def __init__(self):
        self.display_duration = 5  # Duration in seconds
        self.start_time = None
        self.medal_colors = {
            'gold': GOLD,
            'silver': SILVER,
            'bronze': BRONZE,
            None: WHITE
        }

    def show(self, score_manager):
        if self.start_time is None:
            self.start_time = time.time()
            
        # Create semi-transparent background
        overlay = pygame.Surface((SCREEN_WIDTH, SCREEN_HEIGHT))
        overlay.fill(BLACK)
        overlay.set_alpha(200)
        screen.blit(overlay, (0, 0))
        
        # Display congratulations message
        if score_manager.won_game:
            draw_text("CONGRATULATIONS! YOU'VE REACHED THE SUMMIT!", font_title, GOLD, SCREEN_WIDTH//2 - 300, 100)
        else:
            draw_text("GAME OVER!", font_title, WHITE, SCREEN_WIDTH//2 - 150, 100)

        # Display medal if earned
        medal_status = score_manager.get_medal_status()
        if medal_status:
            medal_text = f"{medal_status.upper()} MEDAL ACHIEVED!"
            medal_color = self.medal_colors[medal_status]
            draw_text(medal_text, font_big, medal_color, SCREEN_WIDTH//2 - 150, 180)
        
        # Display final stats
        stats_y = 250
        draw_text(f"Final Score: {score_manager.score}", font_score, WHITE, SCREEN_WIDTH//2 - 100, stats_y)
        draw_text(f"Time: {score_manager.get_formatted_time()}", font_score, WHITE, SCREEN_WIDTH//2 - 100, stats_y + 50)
        
        if score_manager.combo_count > 1:
            draw_text(f"Highest Combo: x{score_manager.combo_multiplier:.1f}", font_score, WHITE, SCREEN_WIDTH//2 - 100, stats_y + 100)
            
        # Show bonus/penalty message if game was won
        if score_manager.won_game:
            if score_manager.completion_time <= score_manager.quick_completion_threshold:
                draw_text(f"Time Bonus: +46 points!", font_score, GOLD, SCREEN_WIDTH//2 - 100, stats_y + 150)
            else:
                penalty = int((score_manager.completion_time - score_manager.quick_completion_threshold) * score_manager.time_penalty_rate)
                draw_text(f"Time Penalty: -{penalty} points", font_score, (255, 100, 100), SCREEN_WIDTH//2 - 100, stats_y + 150)
        
        # Display "Mount Apo Summit" message if reached max score
        if score_manager.score >= score_manager.target_score:
            text = "You've reached Mount Apo's Summit!"
            text_surface = font_big.render(text, True, GOLD)
            text_rect = text_surface.get_rect(center=(SCREEN_WIDTH//2, stats_y + 200))
            screen.blit(text_surface, text_rect)
        
        # Check if display duration has elapsed
        return time.time() - self.start_time >= self.display_duration

# Create scoreboard screen instance
scoreboard_screen = ScoreboardScreen()

class ScoreManager:
    def __init__(self):
        self.score = 0
        self.highest_point = 0
        self.max_score = MAX_SCORE  # Update this to use the new MAX_SCORE
        self.height_multiplier = 0.1
        self.combo_multiplier = 1.0
        self.combo_count = 0
        self.last_platform_y = 0
        self.medal_thresholds = {
            'bronze': 1000,
            'silver': 1500,
            'gold': 2954  # Keep gold medal at the target score
        }
    
    def get_medal_status(self):
        if self.score >= self.medal_thresholds['gold']:
            return 'gold'
        elif self.score >= self.medal_thresholds['silver']:
            return 'silver'
        elif self.score >= self.medal_thresholds['bronze']:
            return 'bronze'
        return None

class TimeBasedScoreManager(ScoreManager):
    def __init__(self):
        super().__init__()
        self.start_time = time.time()
        self.completion_time = 0
        self.time_penalty_rate = 2
        self.quick_completion_threshold = 60
        self.leaderboard_file = "leaderboard.json"
        self.leaderboard = self.load_leaderboard()
        self.points_per_platform = 60
        self.platforms_reached = set()
        self.won_game = False
        self.target_score = 2954  # Score needed for summit to appear
        self.max_score = 3000     # Maximum possible score (with time bonus)
        self.summit_reached = False
   
    def trigger_summit_sequence(self):
        if not self.summit_reached and self.score >= self.target_score:
            self.summit_reached = True
            self.won_game = True
            self.completion_time = time.time() - self.start_time
            self.apply_time_bonus_or_penalty()
            return True
        return False

    def load_leaderboard(self):
        try:
            with open(self.leaderboard_file, 'r') as file:
                return json.load(file)
        except FileNotFoundError:
            return []

    def save_leaderboard(self):
        with open(self.leaderboard_file, 'w') as file:
            json.dump(self.leaderboard, file)

    def update_score(self, player_y, current_scroll, platform_hit=False):
        if self.won_game:
            return False
            
        if platform_hit:
            platform_id = f"{player_y + current_scroll}"
            if platform_id not in self.platforms_reached:
                self.platforms_reached.add(platform_id)
                self.add_points(self.points_per_platform)
                
                self.combo_count += 1
                self.combo_multiplier = min(1.0 + (self.combo_count * 0.1), 1.5)
                combo_bonus = int(self.points_per_platform * (self.combo_multiplier - 1))
                if combo_bonus > 0:
                    self.add_points(combo_bonus)
        
        return False  # Removed win condition check as it's handled in Player class
    
    def apply_time_bonus_or_penalty(self):
        if self.completion_time <= self.quick_completion_threshold:
            bonus = 46  # Makes max score exactly 3000 (2954 + 46)
            self.score = min(self.target_score + bonus, self.max_score)
        else:
            time_over = self.completion_time - self.quick_completion_threshold
            penalty = int(time_over * self.time_penalty_rate)
            self.score = max(0, self.target_score - penalty)

    def add_points(self, points):
        if not self.won_game:
            self.score = min(self.score + points, self.target_score)
        else:
            self.score = min(self.score + points, self.max_score)

    def add_to_leaderboard(self, player_name):
        entry = {
            "name": player_name,
            "score": self.score,
            "time": self.completion_time,
            "date": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        self.leaderboard.append(entry)
        self.leaderboard.sort(key=lambda x: (-x["score"], x["time"]))
        self.leaderboard = self.leaderboard[:10]
        self.save_leaderboard()

    def reset(self):
        self.score = 0
        self.combo_multiplier = 1.0
        self.combo_count = 0
        self.start_time = time.time()
        self.completion_time = 0
        self.platforms_reached.clear()
        self.won_game = False
        self.summit_reached = False  # Added this to properly reset summit state

    def get_formatted_time(self):
        current_time = time.time() - self.start_time if not game_over else self.completion_time
        minutes = int(current_time // 60)
        seconds = int(current_time % 60)
        return f"{minutes:02d}:{seconds:02d}"

def draw_leaderboard(screen, font_small, font_big):
    # Create semi-transparent overlay
    overlay = pygame.Surface((SCREEN_WIDTH, SCREEN_HEIGHT))
    overlay.fill(BLACK)
    overlay.set_alpha(200)
    screen.blit(overlay, (0, 0))
    
    # Draw leaderboard content
    leaderboard_x = SCREEN_WIDTH // 2 - 150
    leaderboard_y = 50

    title = "LEADERBOARD"
    title_surface = font_big.render(title, True, WHITE)
    title_rect = title_surface.get_rect(center=(SCREEN_WIDTH//2, leaderboard_y))
    screen.blit(title_surface, title_rect)
    
    y_offset = 60
    for i, entry in enumerate(score_manager.leaderboard, 1):
        # Center score text
        text = f"{i}. {entry['name']}: {entry['score']}"
        score_surface = font_small.render(text, True, WHITE)
        score_rect = score_surface.get_rect(center=(SCREEN_WIDTH//2, leaderboard_y + y_offset))
        screen.blit(score_surface, score_rect)
        
        # Center time text
        time_text = f"Time: {int(entry['time'] // 60)}:{int(entry['time'] % 60):02d}"
        time_surface = font_small.render(time_text, True, WHITE)
        time_rect = time_surface.get_rect(center=(SCREEN_WIDTH//2, leaderboard_y + y_offset + 20))
        screen.blit(time_surface, time_rect)
        
        y_offset += 50
    space_text = "Press SPACE to play again"
    space_surface = font_small.render(space_text, True, WHITE)
    space_rect = space_surface.get_rect(center=(SCREEN_WIDTH//2, SCREEN_HEIGHT - 50))
    screen.blit(space_surface, space_rect)

class InputBox:
    def __init__(self, x, y, width, height, font):
        self.rect = pygame.Rect(x, y, width, height)
        self.color = pygame.Color('lightgray')
        self.text = ''
        self.font = font
        self.txt_surface = font.render(self.text, True, self.color)
        self.active = False

    def handle_event(self, event):
        if event.type == pygame.MOUSEBUTTONDOWN:
            if self.rect.collidepoint(event.pos):
                self.active = True
            else:
                self.active = False
            self.color = pygame.Color('white') if self.active else pygame.Color('lightgray')
        
        if event.type == pygame.KEYDOWN:
            if self.active:
                if event.key == pygame.K_RETURN:
                    return self.text
                elif event.key == pygame.K_BACKSPACE:
                    self.text = self.text[:-1]
                else:
                    if len(self.text) < 10:
                        self.text += event.unicode
                self.txt_surface = self.font.render(self.text, True, self.color)
        return None

    def draw(self, screen):
        screen.blit(self.txt_surface, (self.rect.x + 5, self.rect.y + 5))
        pygame.draw.rect(screen, self.color, self.rect, 2)

def flip(sprites):
    return [pygame.transform.flip(sprite, True, False) for sprite in sprites]

def load_sprite_sheets(dir1, dir2, width, height, direction=False):
    path = join("Assets", dir1, dir2)
    images = [f for f in listdir(path) if f.endswith('.png')]
    all_sprites = {}

    for image in images:
        try:
            sprite_sheet = pygame.image.load(join(path, image)).convert_alpha()
            sprites = []
            
            for i in range(sprite_sheet.get_width() // width):
                surface = pygame.Surface((width, height), pygame.SRCALPHA, 32)
                rect = pygame.Rect(i * width, 0, width, height)
                surface.blit(sprite_sheet, (0, 0), rect)
                sprites.append(pygame.transform.scale2x(surface))

            if direction:
                all_sprites[image.replace(".png", "") + "_right"] = sprites
                all_sprites[image.replace(".png", "") + "_left"] = flip(sprites)
            else:
                all_sprites[image.replace(".png", "")] = sprites
        except Exception as e:
            print(f"Error processing {image}: {e}")

    return all_sprites

def draw_bg(bg_scroll):
    # Calculate how many background tiles we need to cover the screen
    tiles_needed = (SCREEN_HEIGHT // bg_image.get_height()) + 2
    
    # Calculate the starting y position for the first tile
    start_y = (bg_scroll * 0.3) % bg_image.get_height()
    
    # Draw multiple background tiles to ensure smooth scrolling
    for i in range(tiles_needed):
        y_pos = -bg_image.get_height() + (i * bg_image.get_height()) + start_y
        screen.blit(bg_image, (0, y_pos))
    
    # Softer overlay for consistent atmosphere
    overlay = pygame.Surface((SCREEN_WIDTH, SCREEN_HEIGHT))
    overlay.fill((30, 30, 35))  # Slightly bluish dark overlay
    overlay.set_alpha(85)  # Subtle overlay
    screen.blit(overlay, (0, 0))

    # Create a smoother gradient overlay
    gradient = pygame.Surface((SCREEN_WIDTH, SCREEN_HEIGHT), pygame.SRCALPHA)
    gradient_start = 0
    gradient_end = SCREEN_HEIGHT
    
    for i in range(gradient_start, gradient_end):
        progress = (i - gradient_start) / (gradient_end - gradient_start)
        alpha = int(25 * progress)  # Max alpha of 25 for subtle effect
        pygame.draw.line(gradient, (0, 0, 0, alpha), (0, i), (SCREEN_WIDTH, i))
    
    screen.blit(gradient, (0, 0))

class Player():
    def __init__(self, x, y):
        self.ANIMATION_DELAY = 3
        self.PLAYER_WIDTH = 32
        self.PLAYER_HEIGHT = 32
        self.rect = pygame.Rect(0, 0, self.PLAYER_WIDTH, self.PLAYER_HEIGHT)
        self.rect.center = (x, y)
        self.vel_y = 0
        self.flip = False
        self.initial_height = y
        self.standing_on_summit = False
        self.has_played_death_sound = False 
        
        try:
            self.sprites = load_sprite_sheets("MainCharacters", "MaskDude", self.PLAYER_WIDTH, self.PLAYER_HEIGHT, True)
        except Exception as e:
            print(f"Error loading player sprites: {e}")
            self.sprites = None
            
        self.animation_count = 0
        self.fall_count = 0
        self.jumping = False
        self.running = False
        self.state = "idle"
        self.facing_right = True
        self.current_sprite = 0

    def get_sprite_sheet(self):
        if not self.sprites:
            return None
        sprite_sheet_name = self.state + ("_right" if self.facing_right else "_left")
        return self.sprites.get(sprite_sheet_name, self.sprites.get("idle_right", []))

    def move(self):
        global game_over, name_input_active, score_manager, input_box
        scroll = 0
        dx = 0
        dy = 0

        #Handle Player Movement
        key = pygame.key.get_pressed()
        if key[pygame.K_a]:
            dx = -14
            self.facing_right = False
            self.running = True
            self.state = "run"
        elif key[pygame.K_d]:
            dx = 14
            self.facing_right = True
            self.running = True
            self.state = "run"
        else:
            self.running = False
            self.state = "idle"
        
        #Gravity
        self.vel_y += GRAVITY
        dy += self.vel_y

        if self.vel_y > 0:
            self.state = "fall"
        elif self.vel_y < 0:
            self.state = "jump"

        if self.rect.left + dx < 0:
            dx = -self.rect.left
        if self.rect.right + dx > SCREEN_WIDTH:
            dx = SCREEN_WIDTH - self.rect.right

        #Summit Sequence
        for platform in platform_group:
            if platform.rect.colliderect(self.rect.x, self.rect.y + dy, self.PLAYER_WIDTH, self.PLAYER_HEIGHT):
                if self.rect.bottom < platform.rect.centery:
                    if self.vel_y > 0:
                        self.rect.bottom = platform.rect.top
                        dy = 0
                        
                        # Summit platform collision
                        if isinstance(platform, SummitPlatform) and not self.standing_on_summit:
                            self.standing_on_summit = True
                            score_manager.summit_reached = True
                            score_manager.won_game = True
                            score_manager.completion_time = time.time() - score_manager.start_time
                            score_manager.apply_time_bonus_or_penalty()
                            
                            # Remove all other platforms
                            for p in platform_group:
                                if not isinstance(p, SummitPlatform):
                                    p.kill()
                            
                            # Immediately trigger game over sequence
                            game_over = True
                            name_input_active = True
                            input_box = InputBox(SCREEN_WIDTH//2 - 100, 400, 200, 30, font_small)
                        else:
                            if not self.standing_on_summit:  # Only jump if not on summit
                                self.vel_y = -19
                                self.jumping = True
                                try:
                                    jump_sound.play()
                                except:
                                    pass
                                if not platform.was_hit:
                                    platform.was_hit = True
                                    score_manager.update_score(self.rect.y, bg_scroll, True)
                                    
                                    # Check if we've hit exactly 2954 points for summit spawn
                                    if (score_manager.score >= 2954 and 
                                        not any(isinstance(p, SummitPlatform) for p in platform_group)):
                                        # Create summit platform above current position
                                        summit_y = platform.rect.y - 200  # Spawn summit platform higher
                                        summit_platform = SummitPlatform(
                                            SCREEN_WIDTH // 2,
                                            summit_y,
                                            250  # Wider platform for dramatic effect
                                        )
                                        platform_group.add(summit_platform)

        
        if self.rect.top > SCREEN_HEIGHT and not self.has_played_death_sound:
            try:
                death_sound.play()
                self.has_played_death_sound = True
                pygame.mixer.music.stop()  # Stop background music on death
            except:
                pass


        if self.rect.top <= SCROLL_THRESH:
            if self.vel_y < 0:
                scroll = -dy

        self.rect.x += dx
        self.rect.y += dy + scroll

        if not score_manager.summit_reached:
            score_manager.update_score(self.rect.y, bg_scroll)

        self.animation_count += 1
        if self.animation_count >= self.ANIMATION_DELAY:
            self.animation_count = 0
            sprite_sheet = self.get_sprite_sheet()
            if sprite_sheet:
                self.current_sprite = (self.current_sprite + 1) % len(sprite_sheet)

        return scroll

    def draw(self):
        sprite_sheet = self.get_sprite_sheet()
        if sprite_sheet and len(sprite_sheet) > 0:
            current_sprite = sprite_sheet[self.current_sprite % len(sprite_sheet)]
            sprite_rect = current_sprite.get_rect(center=self.rect.center)
            screen.blit(current_sprite, sprite_rect)
        else:
            pygame.draw.rect(screen, (255, 0, 0), self.rect)

class Platform(pygame.sprite.Sprite):
    def __init__(self, x, y, width):
        pygame.sprite.Sprite.__init__(self)
        height = int((platform_image.get_height() / platform_image.get_width()) * width)
        self.image = pygame.transform.scale(platform_image, (width, height))
        self.rect = self.image.get_rect()
        self.rect.x = x
        self.rect.y = y
        self.was_hit = False
        self.start_y = y
        self.should_disappear = False
        self.alpha = 255

    def update(self, scroll=0):
        self.rect.y += scroll
        
        if self.should_disappear:
            self.alpha = max(0, self.alpha - 15)  # Fade out gradually
            self.image.set_alpha(self.alpha)
            if self.alpha <= 0:
                self.kill()
        
        if self.rect.top > SCREEN_HEIGHT:
            self.kill()

#Summit platform
class SummitPlatform(Platform):
    def __init__(self, x, y, width):
        super().__init__(x, y, width)
        # Make the summit platform visually distinct
        self.image = pygame.transform.scale(platform_image, (width, int(self.rect.height * 2)))
        self.rect = self.image.get_rect()
        self.rect.centerx = SCREEN_WIDTH // 2  # Center horizontally
        self.rect.y = y
        # Make summit platform more visible
        self.image.set_alpha(255)

# Game loop implementation
score_manager = TimeBasedScoreManager()
jumpy = Player(SCREEN_WIDTH // 2, SCREEN_HEIGHT - 150)
platform_group = pygame.sprite.Group()

# Create starting platform
platform = Platform(SCREEN_WIDTH // 2 - 50, SCREEN_HEIGHT - 50, 100)
platform_group.add(platform)
input_box = None
run = True

# Initialize game states
scroll = 0
bg_scroll = 0
show_leaderboard = False
show_scoreboard = False
name_input_active = False
game_over = False

while run:
    clock.tick(FPS)
    
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            run = False
            
        # Handle name input
        if game_over and name_input_active and input_box:
            name = input_box.handle_event(event)
            if name:
                score_manager.add_to_leaderboard(name)
                name_input_active = False
                show_scoreboard = True
                scoreboard_screen.start_time = None
        
        # Handle space key for screen transitions
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_SPACE:
                if show_scoreboard:
                    show_scoreboard = False
                    show_leaderboard = True
                elif show_leaderboard:
                    # Reset everything for new game
                    game_over = False
                    scroll = 0
                    bg_scroll = 0
                    show_leaderboard = False
                    show_scoreboard = False
                    name_input_active = False
                    input_box = None
                    score_manager.reset()
                    score_manager.summit_reached = False
                    jumpy = Player(SCREEN_WIDTH // 2, SCREEN_HEIGHT - 150)
                    platform_group.empty()
                    platform = Platform(SCREEN_WIDTH // 2 - 50, SCREEN_HEIGHT - 50, 100)
                    platform_group.add(platform)

    if not game_over:
        # Update and draw background
        bg_scroll += scroll
        if bg_scroll >= 600:
            bg_scroll = 0
        draw_bg(bg_scroll)
        draw_borders(bg_scroll)

        # Game logic
        scroll = jumpy.move()
        platform_group.update(scroll)
        platform_group.draw(screen)
        jumpy.draw()

        # Generate platforms
        if not score_manager.summit_reached and not any(isinstance(p, SummitPlatform) for p in platform_group):
            if len(platform_group) < MAX_PLATFORMS:
                p_w = random.randint(80, 120)
                p_x = random.randint(0, SCREEN_WIDTH - p_w)
                
                platform_heights = [p.rect.y for p in platform_group]
                highest_platform = min(platform_heights) if platform_heights else SCREEN_HEIGHT
                
                vertical_min = 80
                vertical_max = 120
                p_y = highest_platform - random.randint(vertical_min, vertical_max)
                
                can_spawn = True
                for platform in platform_group:
                    vertical_gap = 50
                    horizontal_gap = p_w
            
                    if (abs(p_y - platform.rect.y) < vertical_gap or 
                        abs(p_x - platform.rect.x) < horizontal_gap):
                        can_spawn = False
                        break
                        
                if can_spawn and p_y > -100 and not score_manager.summit_reached:
                    platform = Platform(p_x, p_y, p_w)
                    platform_group.add(platform)

        # Draw UI elements
        draw_text(f'SCORE: {score_manager.score}', font_small, WHITE, 10, 10)
        if score_manager.combo_count > 1:
            draw_text(f'COMBO: x{score_manager.combo_multiplier:.1f}', font_small, WHITE, 10, 30)
        draw_text(f'TIME: {score_manager.get_formatted_time()}', font_small, WHITE, 10, 70)

        # Show summit reached message
        if score_manager.summit_reached:
            overlay = pygame.Surface((SCREEN_WIDTH, 80))
            overlay.fill(BLACK)
            overlay.set_alpha(128)
            screen.blit(overlay, (0, 30))
            draw_text("MOUNT APO SUMMIT REACHED!", font_title, GOLD, SCREEN_WIDTH//2 - 250, 50)

        # Check for game over conditions
        # Check for game over conditions
        if jumpy.rect.top > SCREEN_HEIGHT:  # Only check for falling off screen
            game_over = True
            name_input_active = True
            input_box = InputBox(SCREEN_WIDTH//2 - 100, 400, 200, 30, font_small)
            score_manager.won_game = False

    else:  # Game over state handling
        # Create semi-transparent overlay
        overlay = pygame.Surface((SCREEN_WIDTH, SCREEN_HEIGHT))
        overlay.fill(BLACK)
        overlay.set_alpha(200)
        screen.blit(overlay, (0, 0))
        
        if name_input_active and input_box:
            if score_manager.won_game:
                draw_text("CONGRATULATIONS! YOU'VE REACHED THE SUMMIT!", font_title, GOLD, SCREEN_WIDTH//2 - 300, 300)
            else:
                draw_text("GAME OVER!", font_title, WHITE, SCREEN_WIDTH//2 - 100, 300)
            draw_text("Enter your name:", font_small, WHITE, SCREEN_WIDTH//2 - 100, 370)
            input_box.draw(screen)
        elif show_scoreboard:
            if scoreboard_screen.show(score_manager):
                show_scoreboard = False
                show_leaderboard = True
        elif show_leaderboard:
            draw_leaderboard(screen, font_small, font_big)
            

    pygame.display.update()

pygame.quit()