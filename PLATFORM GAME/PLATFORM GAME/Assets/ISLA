import pygame
import random
from os import listdir
from os.path import isfile, join
import os

# Print working directory and available files for debugging
print("Current working directory:", os.getcwd())
print("Contents of Assets folder:", os.listdir("Assets"))

#initialise pygame
pygame.init()

#game window dimensions
SCREEN_WIDTH = 500
SCREEN_HEIGHT = 800

#create game window
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption('Jump to up to Mount Apo')

#set frame rate
clock = pygame.time.Clock()
FPS = 60

#game variables
SCROLL_THRESH = 200
GRAVITY = 1
MAX_PLATFORMS = 10
MAX_SCORE = 50000  # Maximum score cap
scroll = 0
bg_scroll = 0
game_over = False
fade_counter = 0

#define colours
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
GOLD = (255, 215, 0)
SILVER = (192, 192, 192)
BRONZE = (205, 127, 50)

#define font
font_small = pygame.font.SysFont('Lucida Sans', 20)
font_big = pygame.font.SysFont('Lucida Sans', 24)

try:
    #load images with correct paths
    bg_image = pygame.image.load('Assets/Background/Blue.png').convert_alpha()
    platform_image = pygame.image.load('Assets/Platform/Grey Off.png').convert_alpha()
    
    # Scale background to screen size
    bg_image = pygame.transform.scale(bg_image, (SCREEN_WIDTH, SCREEN_HEIGHT))
    print("Successfully loaded background and platform images")
except Exception as e:
    print(f"Error loading images: {e}")
    raise

# Enhanced Scoring System
class ScoreManager:
    def __init__(self):
        self.score = 0
        self.highest_point = 0
        self.max_score = MAX_SCORE
        self.height_multiplier = 0.1  # Points per pixel of height gained
        self.combo_multiplier = 1.0   # Multiplier for consecutive successful jumps
        self.combo_count = 0
        self.last_platform_y = 0
        
        # Score thresholds for different medals
        self.medal_thresholds = {
            'bronze': 1000,
            'silver': 2500,
            'gold': 4000
        }
    
    def update_score(self, player_y, current_scroll, platform_hit=False):
        """Update score based on height gained and combo multipliers"""
        # Calculate current height considering scroll
        current_height = player_y + current_scroll
        
        # Update height-based score
        if current_height > self.highest_point:
            height_gained = current_height - self.highest_point
            self.highest_point = current_height
            
            # Apply combo multiplier to height points
            height_points = int(height_gained * self.height_multiplier * self.combo_multiplier)
            self.add_points(height_points)
        
        # Handle platform landings
        if platform_hit:
            self.combo_count += 1
            self.combo_multiplier = min(1.0 + (self.combo_count * 0.1), 2.0)  # Max 2x multiplier
            
            # Bonus points for consecutive platform hits
            combo_bonus = self.combo_count * 50
            self.add_points(combo_bonus)
    
    def add_points(self, points):
        """Add points while respecting max score limit"""
        self.score = min(self.score + points, self.max_score)
    
    def reset(self):
        """Reset all scoring variables"""
        self.score = 0
        self.highest_point = 0
        self.combo_multiplier = 1.0
        self.combo_count = 0
        self.last_platform_y = 0
    
    def get_medal_status(self):
        """Return current medal status based on score"""
        if self.score >= self.medal_thresholds['gold']:
            return 'gold'
        elif self.score >= self.medal_thresholds['silver']:
            return 'silver'
        elif self.score >= self.medal_thresholds['bronze']:
            return 'bronze'
        return None

def flip(sprites):
    return [pygame.transform.flip(sprite, True, False) for sprite in sprites]

def load_sprite_sheets(dir1, dir2, width, height, direction=False):
    path = join("Assets", dir1, dir2)
    print(f"Loading sprites from: {path}")
    print(f"Available files in directory: {os.listdir(path)}")
    
    images = [f for f in listdir(path) if f.endswith('.png')]
    print(f"PNG files found: {images}")

    all_sprites = {}

    for image in images:
        print(f"Processing image: {image}")
        try:
            sprite_sheet = pygame.image.load(join(path, image)).convert_alpha()
            sprites = []
            
            sheet_width = sprite_sheet.get_width()
            frame_count = sheet_width // width
            print(f"Sprite sheet width: {sheet_width}, Frame count: {frame_count}")
            
            for i in range(frame_count):
                surface = pygame.Surface((width, height), pygame.SRCALPHA, 32)
                rect = pygame.Rect(i * width, 0, width, height)
                surface.blit(sprite_sheet, (0, 0), rect)
                sprites.append(pygame.transform.scale2x(surface))

            if direction:
                all_sprites[image.replace(".png", "") + "_right"] = sprites
                all_sprites[image.replace(".png", "") + "_left"] = flip(sprites)
            else:
                all_sprites[image.replace(".png", "")] = sprites
                
            print(f"Successfully processed {image}")
        except Exception as e:
            print(f"Error processing {image}: {e}")

    print(f"Loaded sprite sheets: {list(all_sprites.keys())}")
    return all_sprites

def draw_text(text, font, text_col, x, y):
    img = font.render(text, True, text_col)
    screen.blit(img, (x, y))

def draw_bg(bg_scroll):
    screen.blit(bg_image, (0, 0 + bg_scroll))
    screen.blit(bg_image, (0, -600 + bg_scroll))

class Player():
    def __init__(self, x, y):
        self.ANIMATION_DELAY = 3
        self.PLAYER_WIDTH = 32
        self.PLAYER_HEIGHT = 32
        
        self.rect = pygame.Rect(0, 0, self.PLAYER_WIDTH, self.PLAYER_HEIGHT)
        self.rect.center = (x, y)
        self.vel_y = 0
        self.flip = False
        self.initial_height = y
        
        try:
            self.sprites = load_sprite_sheets("MainCharacters", "MaskDude", self.PLAYER_WIDTH, self.PLAYER_HEIGHT, True)
            print("Successfully loaded player sprites")
        except Exception as e:
            print(f"Error loading player sprites: {e}")
            self.sprites = None
            
        self.animation_count = 0
        self.fall_count = 0
        self.jumping = False
        self.running = False
        
        self.state = "idle"
        self.facing_right = True
        self.current_sprite = 0

    def get_sprite_sheet(self):
        if not self.sprites:
            return None
            
        sprite_sheet_name = self.state + ("_right" if self.facing_right else "_left")
        return self.sprites.get(sprite_sheet_name, self.sprites.get("idle_right", []))

    def move(self):
        scroll = 0
        dx = 0
        dy = 0

        key = pygame.key.get_pressed()
        if key[pygame.K_a]:
            dx = -10
            self.facing_right = False
            self.running = True
            self.state = "run"
        elif key[pygame.K_d]:
            dx = 10
            self.facing_right = True
            self.running = True
            self.state = "run"
        else:
            self.running = False
            self.state = "idle"

        self.vel_y += GRAVITY
        dy += self.vel_y

        if self.vel_y > 0:
            self.state = "fall"
        elif self.vel_y < 0:
            self.state = "jump"

        if self.rect.left + dx < 0:
            dx = -self.rect.left
        if self.rect.right + dx > SCREEN_WIDTH:
            dx = SCREEN_WIDTH - self.rect.right

        for platform in platform_group:
            if platform.rect.colliderect(self.rect.x, self.rect.y + dy, self.PLAYER_WIDTH, self.PLAYER_HEIGHT):
                if self.rect.bottom < platform.rect.centery:
                    if self.vel_y > 0:
                        self.rect.bottom = platform.rect.top
                        dy = 0
                        self.vel_y = -20
                        self.jumping = True
                        if not platform.was_hit:
                            score_manager.update_score(self.rect.y, bg_scroll, True)
                            platform.was_hit = True

        if self.rect.top <= SCROLL_THRESH:
            if self.vel_y < 0:
                scroll = -dy

        self.rect.x += dx
        self.rect.y += dy + scroll

        # Update score based on height
        score_manager.update_score(self.rect.y, bg_scroll)

        # Update animation count
        self.animation_count += 1
        if self.animation_count >= self.ANIMATION_DELAY:
            self.animation_count = 0
            sprite_sheet = self.get_sprite_sheet()
            if sprite_sheet:
                self.current_sprite = (self.current_sprite + 1) % len(sprite_sheet)

        return scroll

    def draw(self):
        sprite_sheet = self.get_sprite_sheet()
        if sprite_sheet and len(sprite_sheet) > 0:
            current_sprite = sprite_sheet[self.current_sprite % len(sprite_sheet)]
            sprite_rect = current_sprite.get_rect(center=self.rect.center)
            screen.blit(current_sprite, sprite_rect)
        else:
            pygame.draw.rect(screen, (255, 0, 0), self.rect)

class Platform(pygame.sprite.Sprite):
    def __init__(self, x, y, width):
        pygame.sprite.Sprite.__init__(self)
        height = int((platform_image.get_height() / platform_image.get_width()) * width)
        self.image = pygame.transform.scale(platform_image, (width, height))
        self.rect = self.image.get_rect()
        self.rect.x = x
        self.rect.y = y
        self.was_hit = False  # Track if platform has been hit to prevent double-scoring

    def update(self, scroll):
        self.rect.y += scroll
        if self.rect.top > SCREEN_HEIGHT:
            self.kill()

# Initialize score manager
score_manager = ScoreManager()

#player instance
jumpy = Player(SCREEN_WIDTH // 2, SCREEN_HEIGHT - 150)

#create sprite groups
platform_group = pygame.sprite.Group()

#create starting platform
platform = Platform(SCREEN_WIDTH // 2 - 50, SCREEN_HEIGHT - 50, 100)
platform_group.add(platform)

#game loop
run = True
while run:
    clock.tick(FPS)

    if game_over == False:
        scroll = jumpy.move()

        #draw background
        bg_scroll += scroll
        if bg_scroll >= 600:
            bg_scroll = 0
        draw_bg(bg_scroll)

        #generate platforms
        if len(platform_group) < MAX_PLATFORMS:
            p_w = random.randint(40, 60)
            p_x = random.randint(0, SCREEN_WIDTH - p_w)
            p_y = platform.rect.y - random.randint(80, 120)
            platform = Platform(p_x, p_y, p_w)
            platform_group.add(platform)

        #update platforms
        platform_group.update(scroll)

        #draw sprites
        platform_group.draw(screen)
        jumpy.draw()

        # Draw current score and combo information
        draw_text(f'SCORE: {score_manager.score}', font_small, WHITE, 10, 10)
        if score_manager.combo_count > 1:
            draw_text(f'COMBO: x{score_manager.combo_multiplier:.1f}', font_small, WHITE, 10, 30)
        
        # Draw maximum score indicator if close to max
        if score_manager.score > MAX_SCORE * 0.8:
            draw_text(f'MAX: {MAX_SCORE}', font_small, WHITE, 10, 50)

        #check game over
        if jumpy.rect.top > SCREEN_HEIGHT:
            game_over = True
    else:
        if fade_counter < SCREEN_WIDTH:
            fade_counter += 5
            for y in range(0, 6, 2):
                pygame.draw.rect(screen, BLACK, (0, y * 100, fade_counter, 100))
                pygame.draw.rect(screen, BLACK, (SCREEN_WIDTH - fade_counter, (y + 1) * 100, SCREEN_WIDTH, 100))
        
        # Draw game over screen with medal status
        draw_text('GAME OVER!', font_big, WHITE, 130, 200)
        draw_text(f'FINAL SCORE: {score_manager.score}', font_big, WHITE, 130, 250)
        
        # Display medal if earned
        medal = score_manager.get_medal_status()
        if medal:
            medal_color = GOLD if medal == 'gold' else SILVER if medal == 'silver' else BRONZE
            draw_text(f'{medal.upper()} MEDAL!', font_big, medal_color, 130, 300)
        
        draw_text('PRESS SPACE TO PLAY AGAIN', font_big, WHITE, 40, 350)
        
        key = pygame.key.get_pressed()
        if key[pygame.K_SPACE]:
            #reset variables
            game_over = False
            scroll = 0
            fade_counter = 0
            
            #reset score manager
            score_manager.reset()
            
            #reposition jumpy
            jumpy.rect.center = (SCREEN_WIDTH // 2, SCREEN_HEIGHT - 150)
            jumpy.initial_height = jumpy.rect.y
            
            #reset platforms
            platform_group.empty()
            platform = Platform(SCREEN_WIDTH // 2 - 50, SCREEN_HEIGHT - 50, 100)
            platform_group.add(platform)

    #event handler
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            run = False

    #update display window
    pygame.display.update()

pygame.quit()